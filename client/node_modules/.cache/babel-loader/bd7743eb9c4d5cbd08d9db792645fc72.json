{"ast":null,"code":"var _jsxFileName = \"/Users/jexica/Sync/general_assembly/Chickadee/unit_4/week_12/DigiAltar/client/src/screens/UserAltars/UserAltars.jsx\",\n    _s = $RefreshSig$();\n\nimport { React } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport \"./UserAltars\";\nimport Button from \"../../components/Button/Button\";\nimport AltarCard from \"../../components/AltarCard/AltarCard\";\nimport { createAltar } from \"../../services/altars\";\nimport { deleteAltar } from \"../../services/altars\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UserAltars(props) {\n  _s();\n\n  const history = useHistory();\n\n  const handleEdit = e => {\n    e.preventDefault();\n    history.push(`/myaltars/${props.altar.id}/edit`);\n  };\n\n  const handleDelete = e => {\n    deleteAltar(props.altar.id);\n    setTimeout(() => {\n      props.setToggleFetch(prevState => !prevState);\n    }, 500);\n  };\n\n  const randomName = [\"Hypnotic\", \"Cyber\", \"Techno\", \"Crypto\", \"Digital\", \"Byte\"];\n  const randomName2 = [\"Sanctuary\", \"Shrine\", \"Divine\", \"Holiness\", \"Seance\", \"Artshrine\"];\n\n  const handleCreate = async e => {\n    e.preventDefault();\n    const newAltar = {\n      name: randomName[Math.floor(Math.random() * randomName.length)] + \" \" + randomName2[Math.floor(Math.random() * randomName2.length)],\n      user_id: props.user.id,\n      privacy: false\n    };\n    const created = await createAltar(newAltar);\n\n    if (created) {\n      history.push(`/myaltars/${created.id}/edit`);\n      props.setToggleFetch(prevState => !prevState);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [props.user ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-32 text-right mr-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-primary mr-8\",\n        children: [\"Welcome, \", props.user.username, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: props.handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this) : null, props.altars.map(altar => {\n      var _props$user;\n\n      return ((_props$user = props.user) === null || _props$user === void 0 ? void 0 : _props$user.id) === altar.user_id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(AltarCard, {\n          setToggleFetch: props.setToggleFetch,\n          user: props.user,\n          images: props.images,\n          altar: altar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleEdit,\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleDelete,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true) : null;\n    }), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleCreate,\n      children: \"Create\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(UserAltars, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = UserAltars;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserAltars\");","map":{"version":3,"sources":["/Users/jexica/Sync/general_assembly/Chickadee/unit_4/week_12/DigiAltar/client/src/screens/UserAltars/UserAltars.jsx"],"names":["React","useHistory","Link","Button","AltarCard","createAltar","deleteAltar","UserAltars","props","history","handleEdit","e","preventDefault","push","altar","id","handleDelete","setTimeout","setToggleFetch","prevState","randomName","randomName2","handleCreate","newAltar","name","Math","floor","random","length","user_id","user","privacy","created","username","handleLogout","altars","map","images"],"mappings":"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","sourcesContent":["import { React } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport \"./UserAltars\";\nimport Button from \"../../components/Button/Button\";\nimport AltarCard from \"../../components/AltarCard/AltarCard\";\nimport { createAltar } from \"../../services/altars\";\nimport { deleteAltar } from \"../../services/altars\";\n\nexport default function UserAltars(props) {\n  const history = useHistory();\n\n  const handleEdit = (e) => {\n    e.preventDefault();\n    history.push(`/myaltars/${props.altar.id}/edit`);\n    \n  }\n  const handleDelete = (e) => {\n    deleteAltar(props.altar.id);\n    setTimeout(() => {\n      props.setToggleFetch((prevState)=>(!prevState))\n    }, 500);\n  }\n\n  const randomName = [\n    \"Hypnotic\",\n    \"Cyber\",\n    \"Techno\",\n    \"Crypto\",\n    \"Digital\",\n    \"Byte\",\n  ];\n  const randomName2 = [\n    \"Sanctuary\",\n    \"Shrine\",\n    \"Divine\",\n    \"Holiness\",\n    \"Seance\",\n    \"Artshrine\",\n  ];\n\n\n  const handleCreate = async (e) => {\n    e.preventDefault();\n    const newAltar = {\n      name:\n        randomName[Math.floor(Math.random() * randomName.length)] +\n        \" \" +\n        randomName2[Math.floor(Math.random() * randomName2.length)],\n      user_id: props.user.id,\n      privacy: false,\n    };\n    const created = await createAltar(newAltar);\n    if (created) {\n      history.push(`/myaltars/${created.id}/edit`);\n      props.setToggleFetch((prevState)=>(!prevState))\n    }\n  };\n\n  return (\n    <>\n      {props.user ? (\n        <div className=\"mt-32 text-right mr-12\">\n          <span className=\"text-primary mr-8\">\n            Welcome, {props.user.username}.\n          </span>\n          <Button onClick={props.handleLogout}>Logout</Button>\n        </div>\n      ) : null}\n\n      {props.altars.map((altar) =>\n        props.user?.id === altar.user_id ? (<>\n          <AltarCard setToggleFetch={props.setToggleFetch} user={props.user} images={props.images} altar={altar} />\n          <Button onClick={handleEdit}>Edit</Button>\n          <Button onClick={handleDelete}>Delete</Button></>\n        ) : null\n      )}\n\n      <Button onClick={handleCreate}>Create</Button>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}