{"ast":null,"code":"var _jsxFileName = \"/Users/jexica/Sync/general_assembly/Chickadee/unit_4/week_12/DigiAltar/client/src/screens/UserAltars/UserAltars.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport \"./UserAltars\";\nimport Button from \"../../components/Button/Button\";\nimport AltarCard from \"../../components/AltarCard/AltarCard\";\nimport { createAltar } from \"../../services/altars\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UserAltars(props) {\n  _s();\n\n  const [toggleFetch, setToggleFetch] = useState(false);\n  const randomName = [\"Hypnotic\", \"Cyber\", \"Techno\", \"Crypto\", \"Digital\", \"Byte\"];\n  const randomName2 = [\"Sanctuary\", \"Shrine\", \"Divine\", \"Holiness\", \"Seance\", \"Artshrine\"];\n  const history = useHistory();\n\n  const handleCreate = async e => {\n    e.preventDefault();\n    const newAltar = {\n      name: randomName[Math.floor(Math.random() * randomName.length)] + \" \" + randomName2[Math.floor(Math.random() * randomName2.length)],\n      user_id: props.user.id,\n      privacy: false\n    };\n    const created = await createAltar(newAltar);\n\n    if (created) {\n      history.push(`/myaltars/${created.id}/edit`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [props.user ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-32 text-right mr-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-primary mr-8\",\n        children: [\"Welcome, \", props.user.username, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: props.handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this) : null, props.altars.map(altar => {\n      var _props$user;\n\n      return ((_props$user = props.user) === null || _props$user === void 0 ? void 0 : _props$user.id) === altar.user_id ? /*#__PURE__*/_jsxDEV(AltarCard, {\n        user: props.user,\n        images: props.images,\n        altar: altar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this) : null;\n    }), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleCreate,\n      children: \"Create\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(UserAltars, \"+tjVFfHdCIp5ruRyTTpzW90grVk=\", false, function () {\n  return [useHistory];\n});\n\n_c = UserAltars;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserAltars\");","map":{"version":3,"sources":["/Users/jexica/Sync/general_assembly/Chickadee/unit_4/week_12/DigiAltar/client/src/screens/UserAltars/UserAltars.jsx"],"names":["React","useState","useHistory","Link","Button","AltarCard","createAltar","UserAltars","props","toggleFetch","setToggleFetch","randomName","randomName2","history","handleCreate","e","preventDefault","newAltar","name","Math","floor","random","length","user_id","user","id","privacy","created","push","username","handleLogout","altars","map","altar","images"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAO,cAAP;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,SAASC,WAAT,QAA4B,uBAA5B;;;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACxC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMU,UAAU,GAAG,CACjB,UADiB,EAEjB,OAFiB,EAGjB,QAHiB,EAIjB,QAJiB,EAKjB,SALiB,EAMjB,MANiB,CAAnB;AAQA,QAAMC,WAAW,GAAG,CAAC,WAAD,EAAc,QAAd,EAAwB,QAAxB,EAAkC,UAAlC,EAA8C,QAA9C,EAAwD,WAAxD,CAApB;AAEA,QAAMC,OAAO,GAAGX,UAAU,EAA1B;;AAEA,QAAMY,YAAY,GAAG,MAAOC,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,QAAQ,GAAG;AACfC,MAAAA,IAAI,EACFP,UAAU,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,UAAU,CAACW,MAAtC,CAAD,CAAV,GACA,GADA,GAEAV,WAAW,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,WAAW,CAACU,MAAvC,CAAD,CAJE;AAKfC,MAAAA,OAAO,EAAEf,KAAK,CAACgB,IAAN,CAAWC,EALL;AAMfC,MAAAA,OAAO,EAAE;AANM,KAAjB;AAQA,UAAMC,OAAO,GAAG,MAAMrB,WAAW,CAACW,QAAD,CAAjC;;AACA,QAAIU,OAAJ,EAAa;AACXd,MAAAA,OAAO,CAACe,IAAR,CAAc,aAAYD,OAAO,CAACF,EAAG,OAArC;AACD;AACF,GAdD;;AAgBA,sBACE;AAAA,eACGjB,KAAK,CAACgB,IAAN,gBACC;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,8BACE;AAAM,QAAA,SAAS,EAAC,mBAAhB;AAAA,gCACYhB,KAAK,CAACgB,IAAN,CAAWK,QADvB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAErB,KAAK,CAACsB,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,GAOG,IARN,EAUGtB,KAAK,CAACuB,MAAN,CAAaC,GAAb,CAAkBC,KAAD;AAAA;;AAAA,aAChB,gBAAAzB,KAAK,CAACgB,IAAN,4DAAYC,EAAZ,MAAmBQ,KAAK,CAACV,OAAzB,gBACE,QAAC,SAAD;AAAW,QAAA,IAAI,EAAEf,KAAK,CAACgB,IAAvB;AAA6B,QAAA,MAAM,EAAEhB,KAAK,CAAC0B,MAA3C;AAAmD,QAAA,KAAK,EAAED;AAA1D;AAAA;AAAA;AAAA;AAAA,cADF,GAEI,IAHY;AAAA,KAAjB,CAVH,eAgBE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEnB,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA,kBADF;AAoBD;;GAnDuBP,U;UAaNL,U;;;KAbMK,U","sourcesContent":["import { React, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport \"./UserAltars\";\nimport Button from \"../../components/Button/Button\";\nimport AltarCard from \"../../components/AltarCard/AltarCard\";\nimport { createAltar } from \"../../services/altars\";\n\nexport default function UserAltars(props) {\n  const [toggleFetch, setToggleFetch] = useState(false);\n\n  const randomName = [\n    \"Hypnotic\",\n    \"Cyber\",\n    \"Techno\",\n    \"Crypto\",\n    \"Digital\",\n    \"Byte\",\n  ];\n  const randomName2 = [\"Sanctuary\", \"Shrine\", \"Divine\", \"Holiness\", \"Seance\", \"Artshrine\"];\n\n  const history = useHistory();\n\n  const handleCreate = async (e) => {\n    e.preventDefault();\n    const newAltar = {\n      name:\n        randomName[Math.floor(Math.random() * randomName.length)] +\n        \" \" +\n        randomName2[Math.floor(Math.random() * randomName2.length)],\n      user_id: props.user.id,\n      privacy: false,\n    };\n    const created = await createAltar(newAltar);\n    if (created) {\n      history.push(`/myaltars/${created.id}/edit`);\n    }\n  };\n\n  return (\n    <>\n      {props.user ? (\n        <div className=\"mt-32 text-right mr-12\">\n          <span className=\"text-primary mr-8\">\n            Welcome, {props.user.username}.\n          </span>\n          <Button onClick={props.handleLogout}>Logout</Button>\n        </div>\n      ) : null}\n\n      {props.altars.map((altar) =>\n        props.user?.id === altar.user_id ? (\n          <AltarCard user={props.user} images={props.images} altar={altar} />\n        ) : null\n      )}\n\n      <Button onClick={handleCreate}>Create</Button>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}