{"ast":null,"code":"var _jsxFileName = \"/Users/jexica/Sync/general_assembly/Chickadee/unit_4/week_12/DigiAltar/client/src/components/Drag/DragContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport Box from \"./Box.jsx\";\nimport update from \"immutability-helper\";\nimport AltarImage from \"../AltarImage/AltarImage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  width: \"100vw\",\n  height: \"100vh\",\n  // border: \"5px solid white\",\n  position: \"relative\"\n};\nexport const DragContainer = ({\n  hideSourceOnDrag\n}) => {\n  _s();\n\n  const [boxes, setBoxes] = useState({\n    // this data can hold anything that is relevant\n    // for creating the draggable elements later.\n    // you can store an image ID to pass into altarimages here for example.\n    a: {\n      top: 350,\n      left: 350,\n      imageType: 7\n    },\n    b: {\n      top: 75,\n      left: 175,\n      imageType: 6\n    },\n    c: {\n      top: 20,\n      left: 80,\n      imageType: 1\n    },\n    d: {\n      top: 180,\n      left: 20,\n      imageType: 2\n    },\n    e: {\n      top: 300,\n      left: 300,\n      imageType: 3\n    },\n    f: {\n      top: 150,\n      left: 125,\n      imageType: 4\n    },\n    g: {\n      top: 375,\n      left: 340,\n      imageType: 5\n    }\n  });\n  const moveBox = useCallback((id, left, top) => {\n    setBoxes(update(boxes, {\n      [id]: {\n        $merge: {\n          left,\n          top\n        }\n      }\n    }));\n  }, [boxes, setBoxes]);\n  const [, drop] = useDrop(() => ({\n    accept: ItemTypes.BOX,\n\n    drop(item, monitor) {\n      const delta = monitor.getDifferenceFromInitialOffset();\n      const left = Math.round(item.left + delta.x);\n      const top = Math.round(item.top + delta.y);\n      moveBox(item.id, left, top);\n      return undefined;\n    }\n\n  }), [moveBox]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drop,\n    style: styles,\n    children: Object.keys(boxes).map(key => {\n      // remember this is a deconstruction\n      // which means we are pulling variables out of the\n      // boxes[key] object.\n      const box = boxes[key];\n      return (\n        /*#__PURE__*/\n        // this is where we get the data from the state.\n        // in here we are mapping through the list of boxes and creating\n        // an element on the page for each box\n        // we can the contents of this box component to an altarimage so\n        // that we are dragging images\n        // around instead of text.\n        _jsxDEV(Box, {\n          id: key,\n          left: box.left,\n          top: box.top,\n          hideSourceOnDrag: hideSourceOnDrag,\n          children: [/*#__PURE__*/_jsxDEV(AltarImage, {\n            imageType: box.imageType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), box.title]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      );\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DragContainer, \"w5pAi5gy6b6XH87iNMNEzHj8v/w=\", false, function () {\n  return [useDrop];\n});\n\n_c = DragContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DragContainer\");","map":{"version":3,"sources":["/Users/jexica/Sync/general_assembly/Chickadee/unit_4/week_12/DigiAltar/client/src/components/Drag/DragContainer.jsx"],"names":["useCallback","useState","useDrop","ItemTypes","Box","update","AltarImage","styles","width","height","position","DragContainer","hideSourceOnDrag","boxes","setBoxes","a","top","left","imageType","b","c","d","e","f","g","moveBox","id","$merge","drop","accept","BOX","item","monitor","delta","getDifferenceFromInitialOffset","Math","round","x","y","undefined","Object","keys","map","key","box","title"],"mappings":"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","sourcesContent":["import { useCallback, useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport Box from \"./Box.jsx\";\nimport update from \"immutability-helper\";\nimport AltarImage from \"../AltarImage/AltarImage\";\nconst styles = {\n  width: \"100vw\",\n  height: \"100vh\",\n  // border: \"5px solid white\",\n  position: \"relative\",\n};\nexport const DragContainer = ({ hideSourceOnDrag }) => {\n  const [boxes, setBoxes] = useState({\n    // this data can hold anything that is relevant\n    // for creating the draggable elements later.\n    // you can store an image ID to pass into altarimages here for example.\n\n    a: { top: 350, left: 350, imageType: 7 },\n    b: { top: 75, left: 175, imageType: 6 },\n    c: { top: 20, left: 80, imageType: 1 },\n    d: { top: 180, left: 20, imageType: 2 },\n    e: { top: 300, left: 300, imageType: 3 },\n    f: { top: 150, left: 125, imageType: 4 },\n    g: { top: 375, left: 340, imageType: 5 },\n\n  });\n  const moveBox = useCallback(\n    (id, left, top) => {\n      setBoxes(\n        update(boxes, {\n          [id]: {\n            $merge: { left, top },\n          },\n        })\n      );\n    },\n    [boxes, setBoxes]\n  );\n  const [, drop] = useDrop(\n    () => ({\n      accept: ItemTypes.BOX,\n      drop(item, monitor) {\n        const delta = monitor.getDifferenceFromInitialOffset();\n        const left = Math.round(item.left + delta.x);\n        const top = Math.round(item.top + delta.y);\n        moveBox(item.id, left, top);\n        return undefined;\n      },\n    }),\n    [moveBox]\n  );\n  return (\n    <div ref={drop} style={styles}>\n      {Object.keys(boxes).map((key) => {\n        // remember this is a deconstruction\n        // which means we are pulling variables out of the\n        // boxes[key] object.\n        const box = boxes[key];\n        return (\n\n          // this is where we get the data from the state.\n          // in here we are mapping through the list of boxes and creating\n          // an element on the page for each box\n          // we can the contents of this box component to an altarimage so\n          // that we are dragging images\n          // around instead of text.\n          <Box\n            key={key}\n            id={key}\n            left={box.left}\n            top={box.top}\n            hideSourceOnDrag={hideSourceOnDrag}\n          > \n            <AltarImage imageType={box.imageType}/>\n            {/* we can put anything we want in here, like altarimages */}\n            {box.title}\n          </Box>\n        );\n      })}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}