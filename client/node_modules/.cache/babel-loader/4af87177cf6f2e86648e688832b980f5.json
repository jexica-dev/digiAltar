{"ast":null,"code":"var _jsxFileName = \"/Users/jexica/Sync/general_assembly/Chickadee/unit_4/week_12/DigiAltar/client/src/screens/UserAltars/UserAltars.jsx\",\n    _s = $RefreshSig$();\n\nimport { React } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport \"./UserAltars\";\nimport Button from \"../../components/Button/Button\";\nimport AltarCard from \"../../components/AltarCard/AltarCard\";\nimport { createAltar } from \"../../services/altars\";\nimport { deleteAltar } from \"../../services/altars\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UserAltars(props) {\n  _s();\n\n  const history = useHistory();\n  const randomName = [\"Hypnotic\", \"Cyber\", \"Techno\", \"Crypto\", \"Digital\", \"Byte\"];\n  const randomName2 = [\"Sanctuary\", \"Shrine\", \"Divine\", \"Holiness\", \"Seance\", \"Artshrine\"];\n\n  const handleCreate = async e => {\n    e.preventDefault();\n    const newAltar = {\n      name: randomName[Math.floor(Math.random() * randomName.length)] + \" \" + randomName2[Math.floor(Math.random() * randomName2.length)],\n      user_id: props.user.id,\n      privacy: false\n    };\n    const created = await createAltar(newAltar);\n\n    if (created) {\n      history.push(`/myaltars/${created.id}/edit`);\n      props.setToggleFetch(prevState => !prevState);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreate,\n      className: \"rounded-full py-32 px-32 text-black bg-primary bg-opacity-100 border border-primary hover:bg-trp hover:text-primary\",\n      children: \"Create\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), props.user ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-32 text-right mr-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-primary mr-8\",\n        children: [\"Welcome, \", props.user.username, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: props.handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this) : null, props.altars.map(altar => {\n      var _props$user;\n\n      return ((_props$user = props.user) === null || _props$user === void 0 ? void 0 : _props$user.id) === altar.user_id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(AltarCard, {\n          setToggleFetch: props.setToggleFetch,\n          user: props.user,\n          images: props.images,\n          altar: altar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: e => {\n            e.preventDefault();\n            history.push(`/myaltars/${altar.id}/edit`);\n          },\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: e => {\n            deleteAltar(altar.id);\n            setTimeout(() => {\n              props.setToggleFetch(prevState => !prevState);\n            }, 500);\n          },\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : null;\n    })]\n  }, void 0, true);\n}\n\n_s(UserAltars, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = UserAltars;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserAltars\");","map":{"version":3,"sources":["/Users/jexica/Sync/general_assembly/Chickadee/unit_4/week_12/DigiAltar/client/src/screens/UserAltars/UserAltars.jsx"],"names":["React","useHistory","Link","Button","AltarCard","createAltar","deleteAltar","UserAltars","props","history","randomName","randomName2","handleCreate","e","preventDefault","newAltar","name","Math","floor","random","length","user_id","user","id","privacy","created","push","setToggleFetch","prevState","username","handleLogout","altars","map","altar","images","setTimeout"],"mappings":"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","sourcesContent":["import { React } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport \"./UserAltars\";\nimport Button from \"../../components/Button/Button\";\nimport AltarCard from \"../../components/AltarCard/AltarCard\";\nimport { createAltar } from \"../../services/altars\";\nimport { deleteAltar } from \"../../services/altars\";\n\nexport default function UserAltars(props) {\n  const history = useHistory();\n\n  const randomName = [\n    \"Hypnotic\",\n    \"Cyber\",\n    \"Techno\",\n    \"Crypto\",\n    \"Digital\",\n    \"Byte\",\n  ];\n  const randomName2 = [\n    \"Sanctuary\",\n    \"Shrine\",\n    \"Divine\",\n    \"Holiness\",\n    \"Seance\",\n    \"Artshrine\",\n  ];\n\n  const handleCreate = async (e) => {\n    e.preventDefault();\n    const newAltar = {\n      name:\n        randomName[Math.floor(Math.random() * randomName.length)] +\n        \" \" +\n        randomName2[Math.floor(Math.random() * randomName2.length)],\n      user_id: props.user.id,\n      privacy: false,\n    };\n    const created = await createAltar(newAltar);\n    if (created) {\n      history.push(`/myaltars/${created.id}/edit`);\n      props.setToggleFetch((prevState) => !prevState);\n    }\n  };\n\n  return (\n    <>\n      <button onClick={handleCreate} className=\"rounded-full py-32 px-32 text-black bg-primary bg-opacity-100 border border-primary hover:bg-trp hover:text-primary\">\n      Create\n    </button>\n      {props.user ? (\n        <div className=\"mt-32 text-right mr-12\">\n          <span className=\"text-primary mr-8\">\n            Welcome, {props.user.username}.\n          </span>\n          <Button onClick={props.handleLogout}>Logout</Button>\n        </div>\n      ) : null}\n\n      {props.altars.map((altar) =>\n        props.user?.id === altar.user_id ? (\n          <>\n            <AltarCard\n              setToggleFetch={props.setToggleFetch}\n              user={props.user}\n              images={props.images}\n              altar={altar}\n            />\n            <Button\n              onClick={(e) => {\n                e.preventDefault();\n                history.push(`/myaltars/${altar.id}/edit`);\n              }}\n            >\n              Edit\n            </Button>\n            <Button\n              onClick={(e) => {\n                deleteAltar(altar.id);\n                setTimeout(() => {\n                  props.setToggleFetch((prevState) => !prevState);\n                }, 500);\n              }}\n            >\n              Delete\n            </Button>\n          </>\n        ) : null\n      )}\n\n      \n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}