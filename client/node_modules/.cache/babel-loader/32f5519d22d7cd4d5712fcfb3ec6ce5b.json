{"ast":null,"code":"var _jsxFileName = \"/Users/jexica/Sync/general_assembly/Chickadee/unit_4/week_12/DigiAltar/client/src/screens/UserAltars/UserAltars.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport './UserAltars';\nimport Button from \"../../components/Button/Button\";\nimport AltarCard from \"../../components/AltarCard/AltarCard\";\nimport { createAltar } from '../../services/altars';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UserAltars(props) {\n  _s();\n\n  const [createdAltar, setCreatedAltar] = useState(false);\n  const randomName = ['Hypnotic', \"Cyber\", \"Techno\", \"Crypto\", \"Digital\", \"Byte\"];\n  const randomName2 = ['Sanctuary', \"Shrine\", \"Divine\", \"Holiness\", \"Seance\"];\n  const history = useHistory();\n\n  const handleCreate = async e => {\n    e.preventDefault();\n    const newAltar = {\n      name: randomName[Math.floor(Math.random() * randomName.length)] + \" \" + randomName2[Math.floor(Math.random() * randomName2.length)],\n      user_id: props.user.id,\n      privacy: false\n    };\n    const created = await createAltar(newAltar);\n\n    if (created) {\n      history.push(`/myaltars/${created.id}/edit`);\n    }\n\n    setCreatedAltar({\n      created\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [props.user ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-32 text-right mr-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-primary mr-8\",\n        children: [\" Welcome, \", props.user.username, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 61\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: props.handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }, this) : null, props.altars.map(altar => /*#__PURE__*/_jsxDEV(AltarCard, {\n      user: props.user,\n      images: props.images,\n      altar: altar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleCreate,\n      children: \"Create\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(UserAltars, \"T5iHmdCLJzOP6uqlmcCiKuUW5J4=\", false, function () {\n  return [useHistory];\n});\n\n_c = UserAltars;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserAltars\");","map":{"version":3,"sources":["/Users/jexica/Sync/general_assembly/Chickadee/unit_4/week_12/DigiAltar/client/src/screens/UserAltars/UserAltars.jsx"],"names":["React","useState","useHistory","Link","Button","AltarCard","createAltar","UserAltars","props","createdAltar","setCreatedAltar","randomName","randomName2","history","handleCreate","e","preventDefault","newAltar","name","Math","floor","random","length","user_id","user","id","privacy","created","push","username","handleLogout","altars","map","altar","images"],"mappings":";;;AAAA,SAAQA,KAAR,EAAeC,QAAf,QAA+B,OAA/B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAO,cAAP;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,SAASC,WAAT,QAA4B,uBAA5B;;;AAGA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACxC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAMU,UAAU,GAAG,CAAC,UAAD,EAAa,OAAb,EAAsB,QAAtB,EAAgC,QAAhC,EAA0C,SAA1C,EAAqD,MAArD,CAAnB;AACA,QAAMC,WAAW,GAAG,CAAC,WAAD,EAAc,QAAd,EAAwB,QAAxB,EAAkC,UAAlC,EAA8C,QAA9C,CAApB;AAEA,QAAMC,OAAO,GAAGX,UAAU,EAA1B;;AAEA,QAAMY,YAAY,GAAG,MAAOC,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,QAAQ,GAAG;AACfC,MAAAA,IAAI,EAAEP,UAAU,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,UAAU,CAACW,MAAtC,CAAD,CAAV,GAA4D,GAA5D,GAAkEV,WAAW,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,WAAW,CAACU,MAAvC,CAAD,CADpE;AAEfC,MAAAA,OAAO,EAAEf,KAAK,CAACgB,IAAN,CAAWC,EAFL;AAGfC,MAAAA,OAAO,EAAE;AAHM,KAAjB;AAKE,UAAMC,OAAO,GAAG,MAAMrB,WAAW,CAACW,QAAD,CAAjC;;AACA,QAAIU,OAAJ,EAAa;AACXd,MAAAA,OAAO,CAACe,IAAR,CAAc,aAAYD,OAAO,CAACF,EAAG,OAArC;AACD;;AACDf,IAAAA,eAAe,CAAC;AAAEiB,MAAAA;AAAF,KAAD,CAAf;AACL,GAZC;;AAcA,sBACE;AAAA,eACGnB,KAAK,CAACgB,IAAN,gBAAa;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,8BAAwC;AAAM,QAAA,SAAS,EAAC,mBAAhB;AAAA,iCAA+ChB,KAAK,CAACgB,IAAN,CAAWK,QAA1D;AAAA;AAAA;AAAA;AAAA;AAAA,cAAxC,eACd,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAErB,KAAK,CAACsB,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADc;AAAA;AAAA;AAAA;AAAA;AAAA,YAAb,GAC4D,IAF/D,EAKGtB,KAAK,CAACuB,MAAN,CAAaC,GAAb,CAAkBC,KAAD,iBAChB,QAAC,SAAD;AAAW,MAAA,IAAI,EAAEzB,KAAK,CAACgB,IAAvB;AAA6B,MAAA,MAAM,EAAEhB,KAAK,CAAC0B,MAA3C;AAAmD,MAAA,KAAK,EAAED;AAA1D;AAAA;AAAA;AAAA;AAAA,YADD,CALH,eASI,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEnB,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,kBADF;AAcD;;GAnCuBP,U;UAKNL,U;;;KALMK,U","sourcesContent":["import {React, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport './UserAltars';\nimport Button from \"../../components/Button/Button\";\nimport AltarCard from \"../../components/AltarCard/AltarCard\";\nimport { createAltar } from '../../services/altars'\n\n\nexport default function UserAltars(props) {\n  const [createdAltar, setCreatedAltar] = useState(false);\n  const randomName = ['Hypnotic', \"Cyber\", \"Techno\", \"Crypto\", \"Digital\", \"Byte\"]\n  const randomName2 = ['Sanctuary', \"Shrine\", \"Divine\", \"Holiness\", \"Seance\"  ]\n  \n  const history = useHistory();\n\n  const handleCreate = async (e) => {\n    e.preventDefault();\n    const newAltar = {\n      name: randomName[Math.floor(Math.random() * randomName.length)] + \" \" + randomName2[Math.floor(Math.random() * randomName2.length)],\n      user_id: props.user.id,\n      privacy: false\n    };\n      const created = await createAltar(newAltar);\n      if (created) {\n        history.push(`/myaltars/${created.id}/edit`);\n      }\n      setCreatedAltar({ created });\n};\n  \n  return (\n    <>\n      {props.user ? <div className=\"mt-32 text-right mr-12\"><span className=\"text-primary mr-8\"> Welcome, {props.user.username}.</span>\n      <Button onClick={props.handleLogout}>Logout</Button></div> : null}  \n      \n      \n      {props.altars.map((altar) => (\n        <AltarCard user={props.user} images={props.images} altar={altar}/>\n      ))}\n      \n        <Button onClick={handleCreate}>Create</Button>\n\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}